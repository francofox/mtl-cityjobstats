id: villedemontreal_ingestion
namespace: vdemtl_jobspostul
description: |
  Ingestion of CSV data from the Donnees ouvertes de la Ville de Montreal site on job postings and applications into GCS

variables:
  file: "vdmtl_jobdata_{{ trigger.date | date('yyyy-MM-dd') }}.csv"
  gcs_file: "gs://{{ secret('GCP_BUCKET_NAME') }}/{{ vars.file }}"
  gcs_adminunit_csv: "gs://{{ secret('GCP_BUCKET_NAME') }}/translatefrom/adminunit_{{ trigger.date | date('yyyy-MM-dd') }}.csv"
  gcs_adminunit_tsv: "gs://{{ secret('GCP_BUCKET_NAME') }}/translatefrom/adminunit_{{ trigger.date | date('yyyy-MM-dd') }}.tsv"
  gcs_jobtitle_csv: "gs://{{ secret('GCP_BUCKET_NAME') }}/translatefrom/jobtitle_{{ trigger.date | date('yyyy-MM-dd') }}.csv"
  gcs_jobtitle_tsv: "gs://{{ secret('GCP_BUCKET_NAME') }}/translatefrom/jobtitle_{{ trigger.date | date('yyyy-MM-dd') }}.tsv"
  gcs_translate_outputfolder_jobtitle: "gs://{{ secret('GCP_BUCKET_NAME') }}/trans_jobtitle_{{ trigger.date | date('yyyy-MM-dd') }}/"
  gcs_translate_outputfolder_adminunit: "gs://{{ secret('GCP_BUCKET_NAME') }}/trans_adminunit_{{ trigger.date | date('yyyy-MM-dd') }}/"
  gcs_translated_jobtitle_fname: "{{ secret('GCP_BUCKET_NAME') }}_translatefrom_jobtitle_{{ trigger.date | date('yyyy-MM-dd') }}_en_translations.tsv"
  gcs_translated_adminunit_fname: "{{ secret('GCP_BUCKET_NAME') }}_translatefrom_adminunit_{{ trigger.date | date('yyyy-MM-dd') }}_en_translations.tsv"
  this_table_name: "{{ secret('GCP_DATASET') }}.jobdata_{{ trigger.date | date('yyyy-MM-dd')}}"
  this_jobtitle_table_name: "{{ secret('GCP_DATASET') }}.jobtitle_{{ trigger.date | date('yyyy-MM-dd') }}"
  this_adminunit_table_name: "{{ secret('GCP_DATASET') }}.adminunit_{{ trigger.date | date('yyyy-MM-dd') }}"
  data: "{{ outputs.extract_file.outputFiles['vdmtl_jobdata_' ~ ( trigger.date | date('yyyy-MM-dd' ) ) ~ '.csv'] }}"


tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{ render(vars.file) }}"

  - id: extract_file
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO {{ render(vars.file) }} https://donnees.montreal.ca/dataset/bc95ff0e-255f-4db5-a47d-f46f57ee4e8c/resource/f719b197-b851-40a9-b35f-827f3008c1c9/download/ouverture-de-donnees_affichages_postulants.csv

  - id: transfer_file_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ render(vars.data) }}"
    to: "{{ render(vars.gcs_file) }}"

  - id: create_ext_table_raw
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      create or replace external table `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_table_name) }}`
      (
        Unite_Niveau1 integer options (description="(Unit Level 1) The service unit or borough ID"),
        Description_Unite_Niveau1 string options (description="(en: Description_Unit_L1) Name of the Unit Level 1 service unit or borough"),
        Unite integer options (description="(en: Administrative Unit) The administrative unit is the business unit where the job posting was created. It is represented by 12 significant digits, of which the first two represent the service unit or borough. The numbering represents a structured hierarchy(ex: Service, director, division, section)"),
        Description_Unite string options (description="Description of the administrative unit."),
        Accreditation integer options (description="(en: Work classification) The work classification of the job being advertised. It is represented by two digits."),
        Description_Accreditation string options (description="(en: Name of the work classification) Name of the work classification."),
        Titre string options (description="(en: Title) Job title being advertised."),
        Emploi integer options (description="(en: Job code) Code of the job being advertised. It is represented by 6 digits."),
        No_Affichage string options (description="(en: Post number) Job posting number. It is an alphanumeric field with a defined standard for its nomenclature. Ex.: FIN-16-TEMP-344210-1 means that it is a job posting in the financial services unit in 2016 for a temporary position for the job code 344210. In certain cases, the position number is also indicated.)"),
        Debut date options (description="(en: Start) Starting date of the posting."),
        Fin date options (description="(en: End) End date for the posting."),
        Interne_Externe string options (description="(en: Internal External) Indicator showing whether the posting is only open to internal applicants or not."),
        Nombre_Postulant integer options (description="(en: Number Applying) Total number of applicants having applied for this job posting."),
        Nombre_Femme integer options (description="(en: Number Women) Number of women having applied for this posting.)"),
        Nombre_Handicape integer options (description="(en: Number Disabled) Number of applicants self-identifying as disabled."),
        Nombre_Minorite_Visible integer options (description="(en: Number Visible Minority) Number of applicants self-identifying as a visible minority."),
        Nombre_Autochtone integer options (description="(en: Number Indigenous) Number of applicants self-identifying as indigenous."),
        Nombre_Minorite_Ethnique integer options (description="(en: Number Ethnic Minority) Number of applicants self-identifying as an ethnic minority.")
      )
      options (
        format = "CSV",
        uris = ['{{ render(vars.gcs_file) }}'],
        skip_leading_rows = 1,
        ignore_unknown_values = TRUE
      );
  
  - id: create_tmp_view
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE VIEW `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_table_name) }}_tmp` AS (
        SELECT 
          FARM_FINGERPRINT(COALESCE(No_Affichage, "")
            || COALESCE(CAST(Debut AS STRING), "")) AS row_id,
          FARM_FINGERPRINT(COALESCE(No_Affichage, "") 
            || COALESCE(CAST (Debut AS STRING), "") 
            || COALESCE(CAST(Nombre_Postulant AS STRING), "")) AS unique_id,
          FARM_FINGERPRINT(COALESCE(Description_Unite, "")
            || COALESCE(CAST(Unite AS STRING), "")) AS adminunit_id,
          *
        FROM `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_table_name) }}`
      );
      
  - id: create_main_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.jobdata`
      (
        row_id INTEGER OPTIONS (description="Row ID, calculated off the 'Debut' and 'No_Affichage' fields."),
        unique_id INTEGER OPTIONS (description="Uniqueness ID, for determining which rows have changed for merging into. Calculated off the 'Debut', 'Nombre_Postulant' and 'No_Affichage' fields."),
        adminunit_id INTEGER OPTIONS (description="Admin Unit ID, for translation purposes. Calculated off of 'Unite' and 'Description_Unite'."),
        Unite_Niveau1 INTEGER OPTIONS (description="(Unit Level 1) The service unit or borough ID"),
        Description_Unite_Niveau1 STRING OPTIONS (description="(en: Description_Unit_L1) Name of the Unit Level 1 service unit or borough"),
        Unite INTEGER OPTIONS (description="(en: Administrative Unit) The administrative unit is the business unit where the job posting was created. It is represented by 12 significant digits, of which the first two represent the service unit or borough. The numbering represents a structured hierarchy(ex: Service, director, division, section)"),
        Description_Unite STRING OPTIONS (description="Description of the administrative unit."),
        Accreditation INTEGER OPTIONS (description="(en: Work classification) The work classification of the job being advertised. It is represented by two digits."),
        Description_Accreditation STRING OPTIONS (description="(en: Name of the work classification) Name of the work classification."),
        Titre STRING OPTIONS (description="(en: Title) Job title being advertised."),
        Emploi INTEGER OPTIONS (description="(en: Job code) Code of the job being advertised. It is represented by 6 digits."),
        No_Affichage STRING OPTIONS (description="(en: Post number) Job posting number. It is an alphanumeric field with a defined standard for its nomenclature. Ex.: FIN-16-TEMP-344210-1 means that it is a job posting in the financial services unit in 2016 for a temporary position for the job code 344210. In certain cases, the position number is also indicated.)"),
        Debut DATE OPTIONS (description="(en: Start) Starting date of the posting."),
        Fin DATE OPTIONS (description="(en: End) End date for the posting."),
        Interne_Externe STRING OPTIONS (description="(en: Internal External) Indicator showing whether the posting is only open to internal applicants or not."),
        Nombre_Postulant INTEGER OPTIONS (description="(en: Number Applying) Total number of applicants having applied for this job posting."),
        Nombre_Femme INTEGER OPTIONS (description="(en: Number Women) Number of women having applied for this posting.)"),
        Nombre_Handicape INTEGER OPTIONS (description="(en: Number Disabled) Number of applicants self-identifying as disabled."),
        Nombre_Minorite_Visible INTEGER OPTIONS (description="(en: Number Visible Minority) Number of applicants self-identifying as a visible minority."),
        Nombre_Autochtone INTEGER OPTIONS (description="(en: Number Indigenous) Number of applicants self-identifying as indigenous."),
        Nombre_Minorite_Ethnique INTEGER OPTIONS (description="(en: Number Ethnic Minority) Number of applicants self-identifying as an ethnic minority.")
      ) PARTITION BY DATE_TRUNC(Debut, MONTH); -- this will not necessarily help since the table size is far too small, but this is for the experience
  
  - id: merge_into_main_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.jobdata` AS main
      USING `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_table_name) }}_tmp` AS tmp
      ON main.row_id = tmp.row_id
      WHEN MATCHED AND main.unique_id <> tmp.unique_id THEN
        UPDATE SET
          Nombre_Postulant = tmp.Nombre_Postulant,
          Nombre_Femme = tmp.Nombre_Femme,
          Nombre_Handicape = tmp.Nombre_Handicape,
          Nombre_Minorite_Visible = tmp.Nombre_Minorite_Visible,
          Nombre_Autochtone = tmp.Nombre_Autochtone,
          Nombre_Minorite_Ethnique = tmp.Nombre_Minorite_Ethnique
      WHEN NOT MATCHED THEN
        INSERT (row_id, unique_id, adminunit_id, Unite_Niveau1, Description_Unite_Niveau1, Unite, Description_Unite, Accreditation, Description_Accreditation, Titre, Emploi, No_Affichage, Debut, Fin, Interne_Externe, Nombre_Postulant, Nombre_Femme, Nombre_Handicape, Nombre_Minorite_Visible, Nombre_Autochtone, Nombre_Minorite_Ethnique)
        VALUES (tmp.row_id, tmp.unique_id, tmp.adminunit_id, tmp.Unite_Niveau1, tmp.Description_Unite_Niveau1, tmp.Unite, tmp.Description_Unite, tmp.Accreditation, tmp.Description_Accreditation, tmp.Titre, tmp.Emploi, tmp.No_Affichage, tmp.Debut, tmp.Fin, tmp.Interne_Externe, tmp.Nombre_Postulant, tmp.Nombre_Femme, tmp.Nombre_Handicape, tmp.Nombre_Minorite_Visible, tmp.Nombre_Autochtone, tmp.Nombre_Minorite_Ethnique);

  - id: extract_jobtitles_as_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_jobtitle_table_name) }}` AS (
        select 
          distinct Emploi as jobcode,
          Titre as jobtitle
        from `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.jobdata`
      );
  - id: extract_adminunits_as_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_adminunit_table_name) }}` AS (
        select 
          adminunit_id,
          Description_Unite as adminunit_desc
        from `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.jobdata`
      );

  - id: create_if_not_exists_mastertables
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      create table if not exists `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_adminunits` (
        adminunit_id integer options(description="Administrative Unit ID"),
        adminunit_fr string options(description="Original Administrative Unit description in French"),
        adminunit_en string options(description="Translated Administrative Unit description in English (by Google Translate API)")
      );
      create table if not exists `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_jobtitles` (
        jobcode integer options(description="Job Code ID corresponding to a Job Title"),
        jobtitle_fr string options(description="Original Job Title in French"),
        jobtitle_en string options(description="Translated Job Title in English (by Google Translate API)")
      );
  
  - id: extract_untranslated_jobtitles
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      with translated_jobtitles as (
        select jobcode, jobtitle_fr from `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_jobtitles`
      ),
      new_jobtitles as (
        select * from `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_jobtitle_table_name) }}`
      ),
      untranslated_jobtitles as (
        select * from new_jobtitles
        except distinct
        select * from translated_jobtitles
      )
      
      select * from untranslated_jobtitles
    store: true

  - id: if_untranslated_jobtitles
    type: io.kestra.plugin.core.flow.If
    condition: "{{ outputs.extract_untranslated_jobtitles.size > 0 }}"
    then:
      - id: write_jobtitles_to_tsv
        type: io.kestra.plugin.serdes.csv.IonToCsv
        from: "{{ outputs.extract_untranslated_jobtitles.uri }}"
        fieldSeparator: "\t"
        header: false

      - id: upload_jobtitles_to_gcp
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.write_jobtitles_to_tsv.uri }}"
        to: "{{ render(vars.gcs_jobtitle_tsv) }}"

      - id: delete_if_exists_translation_target_jobtitle
        type: io.kestra.plugin.gcp.gcs.Delete
        uri: "{{ render(vars.gcs_translate_outputfolder_jobtitle) }}{{ render(vars.gcs_translated_jobtitle_fname)}}"
      
      - id: delete_if_exists_transtrarget_jobtitle_indexcsv
        type: io.kestra.plugin.gcp.gcs.Delete
        uri: "{{ render(vars.gcs_translate_outputfolder_jobtitle) }}index.csv"

      - id: translate_jobtitles
        type: io.kestra.plugin.scripts.python.Script
        inputFiles:
          creds.json: |
            {{ secret('GCP_SERVICE_ACCOUNT') }}
        beforeCommands:
          - pip install --upgrade google-cloud-translate
          - export GOOGLE_APPLICATION_CREDENTIALS="`pwd`/creds.json"
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:slim
        script: |
          from google.cloud import translate

          input_uri = "{{ render(vars.gcs_jobtitle_tsv) }}"
          output_uri = "{{ render(vars.gcs_translate_outputfolder_jobtitle) }}"
          project_id = "{{ secret('GCP_PROJECT_ID') }}"
          timeout = 180

          client = translate.TranslationServiceClient()

          location = "us-central1"
          gcs_source = {"input_uri": input_uri}

          input_configs_element = {
              "gcs_source": gcs_source,
              "mime_type": "text/plain",
          }
          gcs_destination = {"output_uri_prefix": output_uri}
          output_config = {"gcs_destination": gcs_destination}
          parent = f"projects/{project_id}/locations/{location}"

          operation = client.batch_translate_text(
              request={
                  "parent": parent,
                  "source_language_code": "fr",
                  "target_language_codes": ["en"],
                  "input_configs": [input_configs_element],
                  "output_config": output_config,
              }
          )
          response = operation.result(timeout)

      - id: create_ext_jobtitle_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          create or replace external table `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.temp_jobtitles_{{ trigger.date | date('yyyy-MM-dd') }}` (
            jobcode int64,
            jobtitle_fr string,
            jobtitle_en string
          )
          options (
            description = "Job codes with original French job title and English translation (by Google Translate API)",
            uris = ['{{ render(vars.gcs_translate_outputfolder_jobtitle) }}{{ render(vars.gcs_translated_jobtitle_fname) }}'],
            format = "CSV",
            field_delimiter = "\t"
          );

      - id: merge_into_dim_jobtitles
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          merge into `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_jobtitles` as main
          using `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.temp_jobtitles_{{ trigger.date | date('yyyy-MM-dd') }}` as tmp
          on main.jobcode = tmp.jobcode
          when not matched then
            insert (jobcode, jobtitle_fr, jobtitle_en)
            values (tmp.jobcode, tmp.jobtitle_fr, tmp.jobtitle_en);

  - id: extract_untranslated_adminunits
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      with translated_adminunits as (
        select adminunit_id, adminunit_fr from `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_adminunits`
      ),
      new_adminunits as (
        select adminunit_id, adminunit_desc as adminunit_fr from `{{ secret('GCP_PROJECT_ID') }}.{{ render(vars.this_adminunit_table_name) }}`
      ),
      untranslated_adminunits as (
        select * from new_adminunits
        except distinct
        select * from translated_adminunits
      )
      select * from untranslated_adminunits
    store: true

  - id: if_untranslated_adminunits
    type: io.kestra.plugin.core.flow.If
    condition: "{{ outputs.extract_untranslated_adminunits.size > 0 }}"
    then:
      - id: write_adminunits_to_tsv
        type: io.kestra.plugin.serdes.csv.IonToCsv
        from: "{{ outputs.extract_untranslated_adminunits.uri }}"
        fieldSeparator: "\t"
        header: false

      - id: upload_adminunits_to_gcp
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{ outputs.write_adminunits_to_tsv.uri }}"
        to: "{{ render(vars.gcs_adminunit_tsv) }}"

      - id: delete_if_exists_translation_target_adminunit
        type: io.kestra.plugin.gcp.gcs.Delete
        uri: "{{ render(vars.gcs_translate_outputfolder_adminunit) }}{{ render(vars.gcs_translated_adminunit_fname)}}"
      
      - id: delete_if_exists_transtrarget_adminunit_indexcsv
        type: io.kestra.plugin.gcp.gcs.Delete
        uri: "{{ render(vars.gcs_translate_outputfolder_adminunit) }}index.csv"

      - id: translate_adminunits
        type: io.kestra.plugin.scripts.python.Script
        inputFiles:
          creds.json: |
            {{ secret('GCP_SERVICE_ACCOUNT') }}
        beforeCommands:
          - pip install --upgrade google-cloud-translate
          - export GOOGLE_APPLICATION_CREDENTIALS="`pwd`/creds.json"
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:slim
        script: |
          from google.cloud import translate

          input_uri = "{{ render(vars.gcs_adminunit_tsv) }}"
          output_uri = "{{ render(vars.gcs_translate_outputfolder_adminunit) }}"
          project_id = "{{ secret('GCP_PROJECT_ID') }}"
          timeout = 180

          client = translate.TranslationServiceClient()

          location = "us-central1"
          gcs_source = {"input_uri": input_uri}

          input_configs_element = {
              "gcs_source": gcs_source,
              "mime_type": "text/plain",
          }
          gcs_destination = {"output_uri_prefix": output_uri}
          output_config = {"gcs_destination": gcs_destination}
          parent = f"projects/{project_id}/locations/{location}"

          operation = client.batch_translate_text(
              request={
                  "parent": parent,
                  "source_language_code": "fr",
                  "target_language_codes": ["en"],
                  "input_configs": [input_configs_element],
                  "output_config": output_config,
              }
          )
          response = operation.result(timeout)

      - id: create_ext_adminunit_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          create or replace external table `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.temp_adminunits_{{ trigger.date | date('yyyy-MM-dd') }}` (
            adminunit_id integer,
            adminunit_fr string,
            adminunit_en string
          )
          options (
            description = "Admin Units with original French description and English translation (by Google Translate API)",
            uris = ['{{ render(vars.gcs_translate_outputfolder_adminunit) }}{{ render(vars.gcs_translated_adminunit_fname) }}'],
            format = "CSV",
            field_delimiter = "\t"
          );

      - id: merge_into_dim_adminunits
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          merge into `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.dim_adminunits` as main
          using `{{ secret('GCP_PROJECT_ID') }}.{{ secret('GCP_DATASET') }}.temp_adminunits_{{ trigger.date | date('yyyy-MM-dd') }}` as tmp
          on main.adminunit_id = tmp.adminunit_id
          when not matched then
          insert (adminunit_id, adminunit_fr, adminunit_en)
          values (tmp.adminunit_id, tmp.adminunit_fr, tmp.adminunit_en);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 6 * * 3"

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values: 
      serviceAccount: "{{ secret('GCP_SERVICE_ACCOUNT') }}"
      projectId: "{{ secret('GCP_PROJECT_ID') }}"
      location: "{{ secret('GCP_LOCATION') }}"
      bucket: "{{ secret('GCP_BUCKET_NAME') }}"